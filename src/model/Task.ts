import TaskDTO from "../dto/TaskDTO";
import RangeLocation = Word.RangeLocation;
import SelectionMode = Word.SelectionMode;
import ContentControlAppearance = Word.ContentControlAppearance;

export class Task {
  taskId: string;
  title: string;
  maxPoints: number;
  ccId: number;
  linkCcId: number | null;

  constructor(taskId: string, title: string, maxPoints: number, ccId: number, linkCcId: number | null) {
    this.taskId = taskId;
    this.title = title;
    this.maxPoints = maxPoints;
    this.ccId = ccId;
    this.linkCcId = linkCcId;
  }

  equals(other: unknown): boolean {
    if (other == null) {
      return false;
    }
    if (this === other) {
      return true;
    }
    if (typeof this !== typeof other) {
      return this == other;
    }
    return this.taskId === (other as Task).taskId;
  }

  assembleDTO(): TaskDTO {
    return new TaskDTO(this.taskId, this.title, this.maxPoints);
  }

  async jumpTo(context: Word.RequestContext): Promise<void> {
    const contentControl = this.getAssociatedContentControl(context);
    const range = contentControl.getRange(RangeLocation.whole);
    range.select(SelectionMode.select);

    await context.sync();
  }

  jumpToAsync(): Promise<void> {
    return Word.run(async (context) => this.jumpTo(context));
  }

  editAsync(fieldName: string, newValue: string): Promise<void> {
    return Word.run(async (context) => this.edit(context, fieldName, newValue));
  }

  async edit(context: Word.RequestContext, fieldName: string, newValue: string): Promise<void> {
    this[fieldName] = newValue;
    if (fieldName === "title") {
      const contentControl = this.getAssociatedContentControl(context);
      contentControl.title = newValue;
    }

    await context.sync();
  }

  getAssociatedContentControlAsync(): Promise<Word.ContentControl | null> {
    return Word.run(async (context) => this.getAssociatedContentControl(context));
  }

  getAssociatedContentControl(context: Word.RequestContext): Word.ContentControl | null {
    return context.document.contentControls.getByIdOrNullObject(this.ccId);
  }

  getLInkContentControlAsync(): Promise<Word.ContentControl | null> {
    return Word.run(async (context) => this.getLinkContentControl(context));
  }

  getLinkContentControl(context: Word.RequestContext): Word.ContentControl | null {
    return context.document.contentControls.getByIdOrNullObject(this.linkCcId);
  }

  async removeLinkContentControl(context: Word.RequestContext): Promise<void> {
    if (this.linkCcId != null) {
      const linkContentControl = this.getLinkContentControl(context);
      if (linkContentControl == null) {
        console.warn(`Link content control with id ${this.linkCcId} does not exist`);
      } else {
        // Delete with content
        linkContentControl.delete(false);

        await context.sync();
      }
    }
  }

  async insertLinkContentControl(context: Word.RequestContext): Promise<void> {
    const contentControl = this.getAssociatedContentControl(context);

    if (contentControl == null) {
      console.error(`Task content control with id ${this.ccId} does not exist`);
      return;
    }

    const linkContentControl = contentControl.getRange(RangeLocation.start).insertContentControl();

    linkContentControl.appearance = ContentControlAppearance.hidden;
    linkContentControl.tag = "task-link";
    linkContentControl.title = "task-link-" + this.taskId;

    /*
     Insert anchor element.
     Hyperlinks emerged as the best alternative to create markers inside the PDF document generated by Word.
     Bookmarks, although preferable, are not exported properly.
     */
    linkContentControl.insertHtml(
      `<a style="text-decoration: none; font-size:0.01em; transform: translate(-1px)" href="task-${this.taskId}">&nbsp;</a>`,
      Word.InsertLocation.start
    );

    linkContentControl.load("id");

    await context.sync();

    this.linkCcId = linkContentControl.id;
  }
}
